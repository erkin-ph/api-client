/*
 * deposits/transactions
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.mambu.sdk.api.v2;

import com.google.gson.reflect.TypeToken;
import com.mambu.sdk.api.*;
import com.mambu.sdk.model.v2.*;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DepositTransactionsApi {
    private ApiClient apiClient;

    public DepositTransactionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DepositTransactionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for adjust
     *
     * @param depositTransactionId    The id or encoded key of the deposit transaction (required)
     * @param body                    Details of the adjustment action (required)
     * @param idempotencyKey          Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call adjustCall(String depositTransactionId, DepositTransactionAdjustmentDetails body, String idempotencyKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/deposits/transactions/{depositTransactionId}:adjust"
                .replaceAll("\\{" + "depositTransactionId" + "\\}", apiClient.escapeString(depositTransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (idempotencyKey != null)
            localVarHeaderParams.put("Idempotency-Key", apiClient.parameterToString(idempotencyKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.mambu.v2+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"basic"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call adjustValidateBeforeCall(String depositTransactionId, DepositTransactionAdjustmentDetails body, String idempotencyKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'depositTransactionId' is set
        if (depositTransactionId == null) {
            throw new ApiException("Missing the required parameter 'depositTransactionId' when calling adjust(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling adjust(Async)");
        }


        com.squareup.okhttp.Call call = adjustCall(depositTransactionId, body, idempotencyKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Allows the adjustment of a deposit transaction. The adjustment of a single transaction may bulk adjust multiple transactions
     *
     * @param depositTransactionId The id or encoded key of the deposit transaction (required)
     * @param body                 Details of the adjustment action (required)
     * @param idempotencyKey       Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @return DepositTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DepositTransaction adjust(String depositTransactionId, DepositTransactionAdjustmentDetails body, String idempotencyKey) throws ApiException {
        ApiResponse<DepositTransaction> resp = adjustWithHttpInfo(depositTransactionId, body, idempotencyKey);
        return resp.getData();
    }

    /**
     * Allows the adjustment of a deposit transaction. The adjustment of a single transaction may bulk adjust multiple transactions
     *
     * @param depositTransactionId The id or encoded key of the deposit transaction (required)
     * @param body                 Details of the adjustment action (required)
     * @param idempotencyKey       Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @return ApiResponse&lt;DepositTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DepositTransaction> adjustWithHttpInfo(String depositTransactionId, DepositTransactionAdjustmentDetails body, String idempotencyKey) throws ApiException {
        com.squareup.okhttp.Call call = adjustValidateBeforeCall(depositTransactionId, body, idempotencyKey, null, null);
        Type localVarReturnType = new TypeToken<DepositTransaction>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows the adjustment of a deposit transaction. The adjustment of a single transaction may bulk adjust multiple transactions (asynchronously)
     *
     * @param depositTransactionId The id or encoded key of the deposit transaction (required)
     * @param body                 Details of the adjustment action (required)
     * @param idempotencyKey       Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @param callback             The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adjustAsync(String depositTransactionId, DepositTransactionAdjustmentDetails body, String idempotencyKey, final ApiCallback<DepositTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adjustValidateBeforeCall(depositTransactionId, body, idempotencyKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DepositTransaction>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for applyFee
     *
     * @param depositAccountId        The id or encoded key of the deposit that the transaction will be created for (required)
     * @param body                    Represents the request payload for creating a transaction of type FEE_APPLIED on a deposit (required)
     * @param idempotencyKey          Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call applyFeeCall(String depositAccountId, FeeAppliedDepositTransactionInput body, String idempotencyKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/deposits/{depositAccountId}/fee-transactions"
                .replaceAll("\\{" + "depositAccountId" + "\\}", apiClient.escapeString(depositAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (idempotencyKey != null)
            localVarHeaderParams.put("Idempotency-Key", apiClient.parameterToString(idempotencyKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.mambu.v2+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"basic"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call applyFeeValidateBeforeCall(String depositAccountId, FeeAppliedDepositTransactionInput body, String idempotencyKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'depositAccountId' is set
        if (depositAccountId == null) {
            throw new ApiException("Missing the required parameter 'depositAccountId' when calling applyFee(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling applyFee(Async)");
        }


        com.squareup.okhttp.Call call = applyFeeCall(depositAccountId, body, idempotencyKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Apply a fee on deposit account
     *
     * @param depositAccountId The id or encoded key of the deposit that the transaction will be created for (required)
     * @param body             Represents the request payload for creating a transaction of type FEE_APPLIED on a deposit (required)
     * @param idempotencyKey   Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @return DepositTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DepositTransaction applyFee(String depositAccountId, FeeAppliedDepositTransactionInput body, String idempotencyKey) throws ApiException {
        ApiResponse<DepositTransaction> resp = applyFeeWithHttpInfo(depositAccountId, body, idempotencyKey);
        return resp.getData();
    }

    /**
     * Apply a fee on deposit account
     *
     * @param depositAccountId The id or encoded key of the deposit that the transaction will be created for (required)
     * @param body             Represents the request payload for creating a transaction of type FEE_APPLIED on a deposit (required)
     * @param idempotencyKey   Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @return ApiResponse&lt;DepositTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DepositTransaction> applyFeeWithHttpInfo(String depositAccountId, FeeAppliedDepositTransactionInput body, String idempotencyKey) throws ApiException {
        com.squareup.okhttp.Call call = applyFeeValidateBeforeCall(depositAccountId, body, idempotencyKey, null, null);
        Type localVarReturnType = new TypeToken<DepositTransaction>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Apply a fee on deposit account (asynchronously)
     *
     * @param depositAccountId The id or encoded key of the deposit that the transaction will be created for (required)
     * @param body             Represents the request payload for creating a transaction of type FEE_APPLIED on a deposit (required)
     * @param idempotencyKey   Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @param callback         The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call applyFeeAsync(String depositAccountId, FeeAppliedDepositTransactionInput body, String idempotencyKey, final ApiCallback<DepositTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = applyFeeValidateBeforeCall(depositAccountId, body, idempotencyKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DepositTransaction>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for getAll
     *
     * @param depositAccountId        The id or encoded key of the deposit account used to retrieve all its transactions (required)
     * @param offset                  Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results (optional)
     * @param limit                   Pagination, the number of elements to retrieve, used in combination with offset to paginate results (optional)
     * @param paginationDetails       Flag specifying whether the pagination should be enabled or not. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs (optional, default to OFF)
     * @param detailsLevel            The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllCall(String depositAccountId, Integer offset, Integer limit, String paginationDetails, String detailsLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deposits/{depositAccountId}/transactions"
                .replaceAll("\\{" + "depositAccountId" + "\\}", apiClient.escapeString(depositAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (paginationDetails != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("paginationDetails", paginationDetails));
        if (detailsLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("detailsLevel", detailsLevel));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.mambu.v2+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"basic"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllValidateBeforeCall(String depositAccountId, Integer offset, Integer limit, String paginationDetails, String detailsLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'depositAccountId' is set
        if (depositAccountId == null) {
            throw new ApiException("Missing the required parameter 'depositAccountId' when calling getAll(Async)");
        }


        com.squareup.okhttp.Call call = getAllCall(depositAccountId, offset, limit, paginationDetails, detailsLevel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Allows retrieval of all transactions for a deposit account via id or encoded key
     *
     * @param depositAccountId  The id or encoded key of the deposit account used to retrieve all its transactions (required)
     * @param offset            Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results (optional)
     * @param limit             Pagination, the number of elements to retrieve, used in combination with offset to paginate results (optional)
     * @param paginationDetails Flag specifying whether the pagination should be enabled or not. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs (optional, default to OFF)
     * @param detailsLevel      The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @return List&lt;DepositTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DepositTransaction> getAll(String depositAccountId, Integer offset, Integer limit, String paginationDetails, String detailsLevel) throws ApiException {
        ApiResponse<List<DepositTransaction>> resp = getAllWithHttpInfo(depositAccountId, offset, limit, paginationDetails, detailsLevel);
        return resp.getData();
    }

    /**
     * Allows retrieval of all transactions for a deposit account via id or encoded key
     *
     * @param depositAccountId  The id or encoded key of the deposit account used to retrieve all its transactions (required)
     * @param offset            Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results (optional)
     * @param limit             Pagination, the number of elements to retrieve, used in combination with offset to paginate results (optional)
     * @param paginationDetails Flag specifying whether the pagination should be enabled or not. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs (optional, default to OFF)
     * @param detailsLevel      The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @return ApiResponse&lt;List&lt;DepositTransaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DepositTransaction>> getAllWithHttpInfo(String depositAccountId, Integer offset, Integer limit, String paginationDetails, String detailsLevel) throws ApiException {
        com.squareup.okhttp.Call call = getAllValidateBeforeCall(depositAccountId, offset, limit, paginationDetails, detailsLevel, null, null);
        Type localVarReturnType = new TypeToken<List<DepositTransaction>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows retrieval of all transactions for a deposit account via id or encoded key (asynchronously)
     *
     * @param depositAccountId  The id or encoded key of the deposit account used to retrieve all its transactions (required)
     * @param offset            Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results (optional)
     * @param limit             Pagination, the number of elements to retrieve, used in combination with offset to paginate results (optional)
     * @param paginationDetails Flag specifying whether the pagination should be enabled or not. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs (optional, default to OFF)
     * @param detailsLevel      The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @param callback          The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllAsync(String depositAccountId, Integer offset, Integer limit, String paginationDetails, String detailsLevel, final ApiCallback<List<DepositTransaction>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllValidateBeforeCall(depositAccountId, offset, limit, paginationDetails, detailsLevel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DepositTransaction>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for getById
     *
     * @param depositTransactionId    The id or encoded key of the deposit transaction (required)
     * @param detailsLevel            The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getByIdCall(String depositTransactionId, String detailsLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deposits/transactions/{depositTransactionId}"
                .replaceAll("\\{" + "depositTransactionId" + "\\}", apiClient.escapeString(depositTransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (detailsLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("detailsLevel", detailsLevel));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.mambu.v2+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"basic"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getByIdValidateBeforeCall(String depositTransactionId, String detailsLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'depositTransactionId' is set
        if (depositTransactionId == null) {
            throw new ApiException("Missing the required parameter 'depositTransactionId' when calling getById(Async)");
        }


        com.squareup.okhttp.Call call = getByIdCall(depositTransactionId, detailsLevel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Allows retrieval of a single deposit transaction via id or encoded key
     *
     * @param depositTransactionId The id or encoded key of the deposit transaction (required)
     * @param detailsLevel         The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @return DepositTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DepositTransaction getById(String depositTransactionId, String detailsLevel) throws ApiException {
        ApiResponse<DepositTransaction> resp = getByIdWithHttpInfo(depositTransactionId, detailsLevel);
        return resp.getData();
    }

    /**
     * Allows retrieval of a single deposit transaction via id or encoded key
     *
     * @param depositTransactionId The id or encoded key of the deposit transaction (required)
     * @param detailsLevel         The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @return ApiResponse&lt;DepositTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DepositTransaction> getByIdWithHttpInfo(String depositTransactionId, String detailsLevel) throws ApiException {
        com.squareup.okhttp.Call call = getByIdValidateBeforeCall(depositTransactionId, detailsLevel, null, null);
        Type localVarReturnType = new TypeToken<DepositTransaction>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows retrieval of a single deposit transaction via id or encoded key (asynchronously)
     *
     * @param depositTransactionId The id or encoded key of the deposit transaction (required)
     * @param detailsLevel         The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @param callback             The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getByIdAsync(String depositTransactionId, String detailsLevel, final ApiCallback<DepositTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getByIdValidateBeforeCall(depositTransactionId, detailsLevel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DepositTransaction>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for makeDeposit
     *
     * @param depositAccountId        The id or encoded key of the deposit that the transaction will be created for (required)
     * @param body                    The input details needed to create a deposit transaction (required)
     * @param idempotencyKey          Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call makeDepositCall(String depositAccountId, DepositTransactionInput body, String idempotencyKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/deposits/{depositAccountId}/deposit-transactions"
                .replaceAll("\\{" + "depositAccountId" + "\\}", apiClient.escapeString(depositAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (idempotencyKey != null)
            localVarHeaderParams.put("Idempotency-Key", apiClient.parameterToString(idempotencyKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.mambu.v2+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"basic"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call makeDepositValidateBeforeCall(String depositAccountId, DepositTransactionInput body, String idempotencyKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'depositAccountId' is set
        if (depositAccountId == null) {
            throw new ApiException("Missing the required parameter 'depositAccountId' when calling makeDeposit(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling makeDeposit(Async)");
        }


        com.squareup.okhttp.Call call = makeDepositCall(depositAccountId, body, idempotencyKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create new deposit transaction for account
     *
     * @param depositAccountId The id or encoded key of the deposit that the transaction will be created for (required)
     * @param body             The input details needed to create a deposit transaction (required)
     * @param idempotencyKey   Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @return DepositTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DepositTransaction makeDeposit(String depositAccountId, DepositTransactionInput body, String idempotencyKey) throws ApiException {
        ApiResponse<DepositTransaction> resp = makeDepositWithHttpInfo(depositAccountId, body, idempotencyKey);
        return resp.getData();
    }

    /**
     * Create new deposit transaction for account
     *
     * @param depositAccountId The id or encoded key of the deposit that the transaction will be created for (required)
     * @param body             The input details needed to create a deposit transaction (required)
     * @param idempotencyKey   Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @return ApiResponse&lt;DepositTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DepositTransaction> makeDepositWithHttpInfo(String depositAccountId, DepositTransactionInput body, String idempotencyKey) throws ApiException {
        com.squareup.okhttp.Call call = makeDepositValidateBeforeCall(depositAccountId, body, idempotencyKey, null, null);
        Type localVarReturnType = new TypeToken<DepositTransaction>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create new deposit transaction for account (asynchronously)
     *
     * @param depositAccountId The id or encoded key of the deposit that the transaction will be created for (required)
     * @param body             The input details needed to create a deposit transaction (required)
     * @param idempotencyKey   Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @param callback         The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call makeDepositAsync(String depositAccountId, DepositTransactionInput body, String idempotencyKey, final ApiCallback<DepositTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = makeDepositValidateBeforeCall(depositAccountId, body, idempotencyKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DepositTransaction>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for makeTransfer
     *
     * @param depositAccountId        The id or encoded key of the deposit that the transaction will be created for (required)
     * @param body                    Input details for transfer transaction (required)
     * @param idempotencyKey          Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call makeTransferCall(String depositAccountId, TransferDepositTransactionInput body, String idempotencyKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/deposits/{depositAccountId}/transfer-transactions"
                .replaceAll("\\{" + "depositAccountId" + "\\}", apiClient.escapeString(depositAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (idempotencyKey != null)
            localVarHeaderParams.put("Idempotency-Key", apiClient.parameterToString(idempotencyKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.mambu.v2+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"basic"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call makeTransferValidateBeforeCall(String depositAccountId, TransferDepositTransactionInput body, String idempotencyKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'depositAccountId' is set
        if (depositAccountId == null) {
            throw new ApiException("Missing the required parameter 'depositAccountId' when calling makeTransfer(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling makeTransfer(Async)");
        }


        com.squareup.okhttp.Call call = makeTransferCall(depositAccountId, body, idempotencyKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new transfer transaction
     *
     * @param depositAccountId The id or encoded key of the deposit that the transaction will be created for (required)
     * @param body             Input details for transfer transaction (required)
     * @param idempotencyKey   Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @return DepositTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DepositTransaction makeTransfer(String depositAccountId, TransferDepositTransactionInput body, String idempotencyKey) throws ApiException {
        ApiResponse<DepositTransaction> resp = makeTransferWithHttpInfo(depositAccountId, body, idempotencyKey);
        return resp.getData();
    }

    /**
     * Create a new transfer transaction
     *
     * @param depositAccountId The id or encoded key of the deposit that the transaction will be created for (required)
     * @param body             Input details for transfer transaction (required)
     * @param idempotencyKey   Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @return ApiResponse&lt;DepositTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DepositTransaction> makeTransferWithHttpInfo(String depositAccountId, TransferDepositTransactionInput body, String idempotencyKey) throws ApiException {
        com.squareup.okhttp.Call call = makeTransferValidateBeforeCall(depositAccountId, body, idempotencyKey, null, null);
        Type localVarReturnType = new TypeToken<DepositTransaction>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new transfer transaction (asynchronously)
     *
     * @param depositAccountId The id or encoded key of the deposit that the transaction will be created for (required)
     * @param body             Input details for transfer transaction (required)
     * @param idempotencyKey   Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @param callback         The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call makeTransferAsync(String depositAccountId, TransferDepositTransactionInput body, String idempotencyKey, final ApiCallback<DepositTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = makeTransferValidateBeforeCall(depositAccountId, body, idempotencyKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DepositTransaction>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for makeWithdrawal
     *
     * @param depositAccountId        The id or encoded key of the deposit that the transaction will be created for (required)
     * @param body                    Input details for withdrawal transaction (required)
     * @param idempotencyKey          Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call makeWithdrawalCall(String depositAccountId, WithdrawalDepositTransactionInput body, String idempotencyKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/deposits/{depositAccountId}/withdrawal-transactions"
                .replaceAll("\\{" + "depositAccountId" + "\\}", apiClient.escapeString(depositAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (idempotencyKey != null)
            localVarHeaderParams.put("Idempotency-Key", apiClient.parameterToString(idempotencyKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.mambu.v2+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"basic"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call makeWithdrawalValidateBeforeCall(String depositAccountId, WithdrawalDepositTransactionInput body, String idempotencyKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'depositAccountId' is set
        if (depositAccountId == null) {
            throw new ApiException("Missing the required parameter 'depositAccountId' when calling makeWithdrawal(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling makeWithdrawal(Async)");
        }


        com.squareup.okhttp.Call call = makeWithdrawalCall(depositAccountId, body, idempotencyKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new withdrawal transaction
     *
     * @param depositAccountId The id or encoded key of the deposit that the transaction will be created for (required)
     * @param body             Input details for withdrawal transaction (required)
     * @param idempotencyKey   Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @return DepositTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DepositTransaction makeWithdrawal(String depositAccountId, WithdrawalDepositTransactionInput body, String idempotencyKey) throws ApiException {
        ApiResponse<DepositTransaction> resp = makeWithdrawalWithHttpInfo(depositAccountId, body, idempotencyKey);
        return resp.getData();
    }

    /**
     * Create a new withdrawal transaction
     *
     * @param depositAccountId The id or encoded key of the deposit that the transaction will be created for (required)
     * @param body             Input details for withdrawal transaction (required)
     * @param idempotencyKey   Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @return ApiResponse&lt;DepositTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DepositTransaction> makeWithdrawalWithHttpInfo(String depositAccountId, WithdrawalDepositTransactionInput body, String idempotencyKey) throws ApiException {
        com.squareup.okhttp.Call call = makeWithdrawalValidateBeforeCall(depositAccountId, body, idempotencyKey, null, null);
        Type localVarReturnType = new TypeToken<DepositTransaction>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new withdrawal transaction (asynchronously)
     *
     * @param depositAccountId The id or encoded key of the deposit that the transaction will be created for (required)
     * @param body             Input details for withdrawal transaction (required)
     * @param idempotencyKey   Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @param callback         The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call makeWithdrawalAsync(String depositAccountId, WithdrawalDepositTransactionInput body, String idempotencyKey, final ApiCallback<DepositTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = makeWithdrawalValidateBeforeCall(depositAccountId, body, idempotencyKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DepositTransaction>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for search
     *
     * @param body                    Criteria to be used to search the deposit transactions (required)
     * @param offset                  Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results (optional)
     * @param limit                   Pagination, the number of elements to retrieve, used in combination with offset to paginate results (optional)
     * @param paginationDetails       Flag specifying whether the pagination should be enabled or not. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs (optional, default to OFF)
     * @param detailsLevel            The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchCall(DepositTransactionSearchCriteria body, Integer offset, Integer limit, String paginationDetails, String detailsLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/deposits/transactions:search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (paginationDetails != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("paginationDetails", paginationDetails));
        if (detailsLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("detailsLevel", detailsLevel));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.mambu.v2+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"basic"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchValidateBeforeCall(DepositTransactionSearchCriteria body, Integer offset, Integer limit, String paginationDetails, String detailsLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling search(Async)");
        }


        com.squareup.okhttp.Call call = searchCall(body, offset, limit, paginationDetails, detailsLevel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Client Directed Query. Allows you to search deposit transactions for deposit accounts by various criteria
     *
     * @param body              Criteria to be used to search the deposit transactions (required)
     * @param offset            Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results (optional)
     * @param limit             Pagination, the number of elements to retrieve, used in combination with offset to paginate results (optional)
     * @param paginationDetails Flag specifying whether the pagination should be enabled or not. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs (optional, default to OFF)
     * @param detailsLevel      The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @return List&lt;DepositTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DepositTransaction> search(DepositTransactionSearchCriteria body, Integer offset, Integer limit, String paginationDetails, String detailsLevel) throws ApiException {
        ApiResponse<List<DepositTransaction>> resp = searchWithHttpInfo(body, offset, limit, paginationDetails, detailsLevel);
        return resp.getData();
    }

    /**
     * Client Directed Query. Allows you to search deposit transactions for deposit accounts by various criteria
     *
     * @param body              Criteria to be used to search the deposit transactions (required)
     * @param offset            Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results (optional)
     * @param limit             Pagination, the number of elements to retrieve, used in combination with offset to paginate results (optional)
     * @param paginationDetails Flag specifying whether the pagination should be enabled or not. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs (optional, default to OFF)
     * @param detailsLevel      The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @return ApiResponse&lt;List&lt;DepositTransaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DepositTransaction>> searchWithHttpInfo(DepositTransactionSearchCriteria body, Integer offset, Integer limit, String paginationDetails, String detailsLevel) throws ApiException {
        com.squareup.okhttp.Call call = searchValidateBeforeCall(body, offset, limit, paginationDetails, detailsLevel, null, null);
        Type localVarReturnType = new TypeToken<List<DepositTransaction>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Client Directed Query. Allows you to search deposit transactions for deposit accounts by various criteria (asynchronously)
     *
     * @param body              Criteria to be used to search the deposit transactions (required)
     * @param offset            Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results (optional)
     * @param limit             Pagination, the number of elements to retrieve, used in combination with offset to paginate results (optional)
     * @param paginationDetails Flag specifying whether the pagination should be enabled or not. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs (optional, default to OFF)
     * @param detailsLevel      The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @param callback          The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchAsync(DepositTransactionSearchCriteria body, Integer offset, Integer limit, String paginationDetails, String detailsLevel, final ApiCallback<List<DepositTransaction>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchValidateBeforeCall(body, offset, limit, paginationDetails, detailsLevel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DepositTransaction>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
