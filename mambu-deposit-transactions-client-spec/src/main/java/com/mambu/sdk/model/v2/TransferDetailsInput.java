/*
 * deposits/transactions
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.mambu.sdk.model.v2;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.Objects;

/**
 * Represents the input for the transfer details for a transfer transaction
 */
@ApiModel(description = "Represents the input for the transfer details for a transfer transaction")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-04-16T09:34:36.124Z")
public class TransferDetailsInput {
    @SerializedName("linkedAccountType")
    private LinkedAccountTypeEnum linkedAccountType = null;
    @SerializedName("linkedAccountKey")
    private String linkedAccountKey = null;
    @SerializedName("linkedAccountId")
    private String linkedAccountId = null;

    public TransferDetailsInput linkedAccountType(LinkedAccountTypeEnum linkedAccountType) {
        this.linkedAccountType = linkedAccountType;
        return this;
    }

    /**
     * The type of the linked account. Can be LOAN or DEPOSIT
     *
     * @return linkedAccountType
     **/
    @ApiModelProperty(required = true, value = "The type of the linked account. Can be LOAN or DEPOSIT")
    public LinkedAccountTypeEnum getLinkedAccountType() {
        return linkedAccountType;
    }

    public void setLinkedAccountType(LinkedAccountTypeEnum linkedAccountType) {
        this.linkedAccountType = linkedAccountType;
    }

    public TransferDetailsInput linkedAccountKey(String linkedAccountKey) {
        this.linkedAccountKey = linkedAccountKey;
        return this;
    }

    /**
     * The encoded key of the linked account
     *
     * @return linkedAccountKey
     **/
    @ApiModelProperty(value = "The encoded key of the linked account")
    public String getLinkedAccountKey() {
        return linkedAccountKey;
    }

    public void setLinkedAccountKey(String linkedAccountKey) {
        this.linkedAccountKey = linkedAccountKey;
    }

    public TransferDetailsInput linkedAccountId(String linkedAccountId) {
        this.linkedAccountId = linkedAccountId;
        return this;
    }

    /**
     * The id of the linked account
     *
     * @return linkedAccountId
     **/
    @ApiModelProperty(value = "The id of the linked account")
    public String getLinkedAccountId() {
        return linkedAccountId;
    }

    public void setLinkedAccountId(String linkedAccountId) {
        this.linkedAccountId = linkedAccountId;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransferDetailsInput transferDetailsInput = (TransferDetailsInput) o;
        return Objects.equals(this.linkedAccountType, transferDetailsInput.linkedAccountType) &&
                Objects.equals(this.linkedAccountKey, transferDetailsInput.linkedAccountKey) &&
                Objects.equals(this.linkedAccountId, transferDetailsInput.linkedAccountId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(linkedAccountType, linkedAccountKey, linkedAccountId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TransferDetailsInput {\n");

        sb.append("    linkedAccountType: ").append(toIndentedString(linkedAccountType)).append("\n");
        sb.append("    linkedAccountKey: ").append(toIndentedString(linkedAccountKey)).append("\n");
        sb.append("    linkedAccountId: ").append(toIndentedString(linkedAccountId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * The type of the linked account. Can be LOAN or DEPOSIT
     */
    @JsonAdapter(LinkedAccountTypeEnum.Adapter.class)
    public enum LinkedAccountTypeEnum {
        LOAN("LOAN"),

        DEPOSIT("DEPOSIT");

        private String value;

        LinkedAccountTypeEnum(String value) {
            this.value = value;
        }

        public static LinkedAccountTypeEnum fromValue(String text) {
            for (LinkedAccountTypeEnum b : LinkedAccountTypeEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<LinkedAccountTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final LinkedAccountTypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public LinkedAccountTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return LinkedAccountTypeEnum.fromValue(String.valueOf(value));
            }
        }
    }

}

