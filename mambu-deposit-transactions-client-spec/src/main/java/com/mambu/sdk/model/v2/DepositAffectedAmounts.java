/*
 * deposits/transactions
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.mambu.sdk.model.v2;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.math.BigDecimal;
import java.util.Objects;

/**
 * The amounts affected after completing the deposit transaction
 */
@ApiModel(description = "The amounts affected after completing the deposit transaction")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-04-16T09:34:36.124Z")
public class DepositAffectedAmounts {
    @SerializedName("fundsAmount")
    private BigDecimal fundsAmount = null;

    @SerializedName("interestAmount")
    private BigDecimal interestAmount = null;

    @SerializedName("feesAmount")
    private BigDecimal feesAmount = null;

    @SerializedName("overdraftAmount")
    private BigDecimal overdraftAmount = null;

    @SerializedName("overdraftFeesAmount")
    private BigDecimal overdraftFeesAmount = null;

    @SerializedName("overdraftInterestAmount")
    private BigDecimal overdraftInterestAmount = null;

    @SerializedName("technicalOverdraftAmount")
    private BigDecimal technicalOverdraftAmount = null;

    @SerializedName("technicalOverdraftInterestAmount")
    private BigDecimal technicalOverdraftInterestAmount = null;

    @SerializedName("fractionAmount")
    private BigDecimal fractionAmount = null;

    public DepositAffectedAmounts fundsAmount(BigDecimal fundsAmount) {
        this.fundsAmount = fundsAmount;
        return this;
    }

    /**
     * Balance change amount involved in a transaction that affects an account with positive balance
     *
     * @return fundsAmount
     **/
    @ApiModelProperty(value = "Balance change amount involved in a transaction that affects an account with positive balance")
    public BigDecimal getFundsAmount() {
        return fundsAmount;
    }

    public void setFundsAmount(BigDecimal fundsAmount) {
        this.fundsAmount = fundsAmount;
    }

    public DepositAffectedAmounts interestAmount(BigDecimal interestAmount) {
        this.interestAmount = interestAmount;
        return this;
    }

    /**
     * Amount of interest involved in a transaction that affects an account with positive balance
     *
     * @return interestAmount
     **/
    @ApiModelProperty(value = "Amount of interest involved in a transaction that affects an account with positive balance")
    public BigDecimal getInterestAmount() {
        return interestAmount;
    }

    public void setInterestAmount(BigDecimal interestAmount) {
        this.interestAmount = interestAmount;
    }

    public DepositAffectedAmounts feesAmount(BigDecimal feesAmount) {
        this.feesAmount = feesAmount;
        return this;
    }

    /**
     * Amount of fees involved in a transaction that affects an account with positive balance
     *
     * @return feesAmount
     **/
    @ApiModelProperty(value = "Amount of fees involved in a transaction that affects an account with positive balance")
    public BigDecimal getFeesAmount() {
        return feesAmount;
    }

    public void setFeesAmount(BigDecimal feesAmount) {
        this.feesAmount = feesAmount;
    }

    public DepositAffectedAmounts overdraftAmount(BigDecimal overdraftAmount) {
        this.overdraftAmount = overdraftAmount;
        return this;
    }

    /**
     * The amount of money that was added/subtracted from the account by this transaction as overdraft
     *
     * @return overdraftAmount
     **/
    @ApiModelProperty(value = "The amount of money that was added/subtracted from the account by this transaction as overdraft")
    public BigDecimal getOverdraftAmount() {
        return overdraftAmount;
    }

    public void setOverdraftAmount(BigDecimal overdraftAmount) {
        this.overdraftAmount = overdraftAmount;
    }

    public DepositAffectedAmounts overdraftFeesAmount(BigDecimal overdraftFeesAmount) {
        this.overdraftFeesAmount = overdraftFeesAmount;
        return this;
    }

    /**
     * Fees amount involved in a transaction that affects an overdraft
     *
     * @return overdraftFeesAmount
     **/
    @ApiModelProperty(value = "Fees amount involved in a transaction that affects an overdraft")
    public BigDecimal getOverdraftFeesAmount() {
        return overdraftFeesAmount;
    }

    public void setOverdraftFeesAmount(BigDecimal overdraftFeesAmount) {
        this.overdraftFeesAmount = overdraftFeesAmount;
    }

    public DepositAffectedAmounts overdraftInterestAmount(BigDecimal overdraftInterestAmount) {
        this.overdraftInterestAmount = overdraftInterestAmount;
        return this;
    }

    /**
     * Interest amount involved in a transaction that affects an overdraft
     *
     * @return overdraftInterestAmount
     **/
    @ApiModelProperty(value = "Interest amount involved in a transaction that affects an overdraft")
    public BigDecimal getOverdraftInterestAmount() {
        return overdraftInterestAmount;
    }

    public void setOverdraftInterestAmount(BigDecimal overdraftInterestAmount) {
        this.overdraftInterestAmount = overdraftInterestAmount;
    }

    public DepositAffectedAmounts technicalOverdraftAmount(BigDecimal technicalOverdraftAmount) {
        this.technicalOverdraftAmount = technicalOverdraftAmount;
        return this;
    }

    /**
     * The amount of money that was added/subtracted from the account by this transaction as technical overdraft
     *
     * @return technicalOverdraftAmount
     **/
    @ApiModelProperty(value = "The amount of money that was added/subtracted from the account by this transaction as technical overdraft")
    public BigDecimal getTechnicalOverdraftAmount() {
        return technicalOverdraftAmount;
    }

    public void setTechnicalOverdraftAmount(BigDecimal technicalOverdraftAmount) {
        this.technicalOverdraftAmount = technicalOverdraftAmount;
    }

    public DepositAffectedAmounts technicalOverdraftInterestAmount(BigDecimal technicalOverdraftInterestAmount) {
        this.technicalOverdraftInterestAmount = technicalOverdraftInterestAmount;
        return this;
    }

    /**
     * The amount of money that was added/subtracted from the account by this transaction as technical overdraft interest
     *
     * @return technicalOverdraftInterestAmount
     **/
    @ApiModelProperty(value = "The amount of money that was added/subtracted from the account by this transaction as technical overdraft interest")
    public BigDecimal getTechnicalOverdraftInterestAmount() {
        return technicalOverdraftInterestAmount;
    }

    public void setTechnicalOverdraftInterestAmount(BigDecimal technicalOverdraftInterestAmount) {
        this.technicalOverdraftInterestAmount = technicalOverdraftInterestAmount;
    }

    public DepositAffectedAmounts fractionAmount(BigDecimal fractionAmount) {
        this.fractionAmount = fractionAmount;
        return this;
    }

    /**
     * In the case of an LOAN_FRACTION_BOUGHT this represent the fraction amount which was bought from another investor
     *
     * @return fractionAmount
     **/
    @ApiModelProperty(value = "In the case of an LOAN_FRACTION_BOUGHT this represent the fraction amount which was bought from another investor")
    public BigDecimal getFractionAmount() {
        return fractionAmount;
    }

    public void setFractionAmount(BigDecimal fractionAmount) {
        this.fractionAmount = fractionAmount;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DepositAffectedAmounts depositAffectedAmounts = (DepositAffectedAmounts) o;
        return Objects.equals(this.fundsAmount, depositAffectedAmounts.fundsAmount) &&
                Objects.equals(this.interestAmount, depositAffectedAmounts.interestAmount) &&
                Objects.equals(this.feesAmount, depositAffectedAmounts.feesAmount) &&
                Objects.equals(this.overdraftAmount, depositAffectedAmounts.overdraftAmount) &&
                Objects.equals(this.overdraftFeesAmount, depositAffectedAmounts.overdraftFeesAmount) &&
                Objects.equals(this.overdraftInterestAmount, depositAffectedAmounts.overdraftInterestAmount) &&
                Objects.equals(this.technicalOverdraftAmount, depositAffectedAmounts.technicalOverdraftAmount) &&
                Objects.equals(this.technicalOverdraftInterestAmount, depositAffectedAmounts.technicalOverdraftInterestAmount) &&
                Objects.equals(this.fractionAmount, depositAffectedAmounts.fractionAmount);
    }

    @Override
    public int hashCode() {
        return Objects.hash(fundsAmount, interestAmount, feesAmount, overdraftAmount, overdraftFeesAmount, overdraftInterestAmount, technicalOverdraftAmount, technicalOverdraftInterestAmount, fractionAmount);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DepositAffectedAmounts {\n");

        sb.append("    fundsAmount: ").append(toIndentedString(fundsAmount)).append("\n");
        sb.append("    interestAmount: ").append(toIndentedString(interestAmount)).append("\n");
        sb.append("    feesAmount: ").append(toIndentedString(feesAmount)).append("\n");
        sb.append("    overdraftAmount: ").append(toIndentedString(overdraftAmount)).append("\n");
        sb.append("    overdraftFeesAmount: ").append(toIndentedString(overdraftFeesAmount)).append("\n");
        sb.append("    overdraftInterestAmount: ").append(toIndentedString(overdraftInterestAmount)).append("\n");
        sb.append("    technicalOverdraftAmount: ").append(toIndentedString(technicalOverdraftAmount)).append("\n");
        sb.append("    technicalOverdraftInterestAmount: ").append(toIndentedString(technicalOverdraftInterestAmount)).append("\n");
        sb.append("    fractionAmount: ").append(toIndentedString(fractionAmount)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

