/*
 * deposits/transactions
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.mambu.sdk.model.v2;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.threeten.bp.OffsetDateTime;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.List;
import java.util.Objects;

/**
 * Represents the action performed on an Deposit Account after which the account&#39;s amount changes its value.
 */
@ApiModel(description = "Represents the action performed on an Deposit Account after which the account's amount changes its value.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-04-16T09:34:36.124Z")
public class DepositTransaction {
    @SerializedName("encodedKey")
    private String encodedKey = null;

    @SerializedName("id")
    private String id = null;

    @SerializedName("externalId")
    private String externalId = null;

    @SerializedName("paymentOrderId")
    private String paymentOrderId = null;

    @SerializedName("creationDate")
    private OffsetDateTime creationDate = null;

    @SerializedName("valueDate")
    private OffsetDateTime valueDate = null;

    @SerializedName("bookingDate")
    private OffsetDateTime bookingDate = null;

    @SerializedName("notes")
    private String notes = null;

    @SerializedName("parentAccountKey")
    private String parentAccountKey = null;
    @SerializedName("type")
    private TypeEnum type = null;
    @SerializedName("amount")
    private BigDecimal amount = null;
    @SerializedName("currencyCode")
    private String currencyCode = null;
    @SerializedName("affectedAmounts")
    private DepositAffectedAmounts affectedAmounts = null;
    @SerializedName("taxes")
    private DepositTaxes taxes = null;
    @SerializedName("accountBalances")
    private DepositTransactionBalances accountBalances = null;
    @SerializedName("userKey")
    private String userKey = null;
    @SerializedName("branchKey")
    private String branchKey = null;
    @SerializedName("centreKey")
    private String centreKey = null;
    @SerializedName("tillKey")
    private String tillKey = null;
    @SerializedName("adjustmentTransactionKey")
    private String adjustmentTransactionKey = null;
    @SerializedName("originalTransactionKey")
    private String originalTransactionKey = null;
    @SerializedName("migrationEventKey")
    private String migrationEventKey = null;
    @SerializedName("terms")
    private DepositTerms terms = null;
    @SerializedName("transactionDetails")
    private TransactionDetails transactionDetails = null;
    @SerializedName("transferDetails")
    private TransferDetails transferDetails = null;
    @SerializedName("fees")
    private List<Fee> fees = null;
    @SerializedName("cardTransaction")
    private CardTransaction cardTransaction = null;

    /**
     * The encoded key of the deposit transaction, auto generated, unique
     *
     * @return encodedKey
     **/
    @ApiModelProperty(value = "The encoded key of the deposit transaction, auto generated, unique")
    public String getEncodedKey() {
        return encodedKey;
    }

    public DepositTransaction id(String id) {
        this.id = id;
        return this;
    }

    /**
     * The id of the deposit transaction, auto generated, unique
     *
     * @return id
     **/
    @ApiModelProperty(value = "The id of the deposit transaction, auto generated, unique")
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public DepositTransaction externalId(String externalId) {
        this.externalId = externalId;
        return this;
    }

    /**
     * The external id of the deposit transaction, customizable, unique
     *
     * @return externalId
     **/
    @ApiModelProperty(value = "The external id of the deposit transaction, customizable, unique")
    public String getExternalId() {
        return externalId;
    }

    public void setExternalId(String externalId) {
        this.externalId = externalId;
    }

    public DepositTransaction paymentOrderId(String paymentOrderId) {
        this.paymentOrderId = paymentOrderId;
        return this;
    }

    /**
     * The payment order id of the deposit transaction, customizable
     *
     * @return paymentOrderId
     **/
    @ApiModelProperty(value = "The payment order id of the deposit transaction, customizable")
    public String getPaymentOrderId() {
        return paymentOrderId;
    }

    public void setPaymentOrderId(String paymentOrderId) {
        this.paymentOrderId = paymentOrderId;
    }

    /**
     * The date when this deposit transaction was created
     *
     * @return creationDate
     **/
    @ApiModelProperty(example = "2016-09-06T13:37:50+03:00", value = "The date when this deposit transaction was created")
    public OffsetDateTime getCreationDate() {
        return creationDate;
    }

    public DepositTransaction valueDate(OffsetDateTime valueDate) {
        this.valueDate = valueDate;
        return this;
    }

    /**
     * Date of the entry (eg date of repayment or disbursal, etc.) (as Organization Time)
     *
     * @return valueDate
     **/
    @ApiModelProperty(example = "2016-09-06T13:37:50+03:00", value = "Date of the entry (eg date of repayment or disbursal, etc.) (as Organization Time)")
    public OffsetDateTime getValueDate() {
        return valueDate;
    }

    public void setValueDate(OffsetDateTime valueDate) {
        this.valueDate = valueDate;
    }

    public DepositTransaction bookingDate(OffsetDateTime bookingDate) {
        this.bookingDate = bookingDate;
        return this;
    }

    /**
     * The date when corresponding JE is booked (as Organization Time)
     *
     * @return bookingDate
     **/
    @ApiModelProperty(example = "2016-09-06T13:37:50+03:00", value = "The date when corresponding JE is booked (as Organization Time)")
    public OffsetDateTime getBookingDate() {
        return bookingDate;
    }

    public void setBookingDate(OffsetDateTime bookingDate) {
        this.bookingDate = bookingDate;
    }

    public DepositTransaction notes(String notes) {
        this.notes = notes;
        return this;
    }

    /**
     * Extra notes about this deposit transaction
     *
     * @return notes
     **/
    @ApiModelProperty(value = "Extra notes about this deposit transaction")
    public String getNotes() {
        return notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }

    public DepositTransaction parentAccountKey(String parentAccountKey) {
        this.parentAccountKey = parentAccountKey;
        return this;
    }

    /**
     * The key of the parent deposit account
     *
     * @return parentAccountKey
     **/
    @ApiModelProperty(value = "The key of the parent deposit account")
    public String getParentAccountKey() {
        return parentAccountKey;
    }

    public void setParentAccountKey(String parentAccountKey) {
        this.parentAccountKey = parentAccountKey;
    }

    public DepositTransaction type(TypeEnum type) {
        this.type = type;
        return this;
    }

    /**
     * The type of the deposit transaction
     *
     * @return type
     **/
    @ApiModelProperty(value = "The type of the deposit transaction")
    public TypeEnum getType() {
        return type;
    }

    public void setType(TypeEnum type) {
        this.type = type;
    }

    public DepositTransaction amount(BigDecimal amount) {
        this.amount = amount;
        return this;
    }

    /**
     * How much was added/removed in account
     *
     * @return amount
     **/
    @ApiModelProperty(value = "How much was added/removed in account")
    public BigDecimal getAmount() {
        return amount;
    }

    public void setAmount(BigDecimal amount) {
        this.amount = amount;
    }

    public DepositTransaction currencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }

    /**
     * The currency in which this transaction was posted
     *
     * @return currencyCode
     **/
    @ApiModelProperty(value = "The currency in which this transaction was posted")
    public String getCurrencyCode() {
        return currencyCode;
    }

    public void setCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
    }

    public DepositTransaction affectedAmounts(DepositAffectedAmounts affectedAmounts) {
        this.affectedAmounts = affectedAmounts;
        return this;
    }

    /**
     * The amounts affected after completing the transaction
     *
     * @return affectedAmounts
     **/
    @ApiModelProperty(value = "The amounts affected after completing the transaction")
    public DepositAffectedAmounts getAffectedAmounts() {
        return affectedAmounts;
    }

    public void setAffectedAmounts(DepositAffectedAmounts affectedAmounts) {
        this.affectedAmounts = affectedAmounts;
    }

    public DepositTransaction taxes(DepositTaxes taxes) {
        this.taxes = taxes;
        return this;
    }

    /**
     * The taxes applied on this transaction
     *
     * @return taxes
     **/
    @ApiModelProperty(value = "The taxes applied on this transaction")
    public DepositTaxes getTaxes() {
        return taxes;
    }

    public void setTaxes(DepositTaxes taxes) {
        this.taxes = taxes;
    }

    public DepositTransaction accountBalances(DepositTransactionBalances accountBalances) {
        this.accountBalances = accountBalances;
        return this;
    }

    /**
     * The account balances changed within the transaction
     *
     * @return accountBalances
     **/
    @ApiModelProperty(value = "The account balances changed within the transaction")
    public DepositTransactionBalances getAccountBalances() {
        return accountBalances;
    }

    public void setAccountBalances(DepositTransactionBalances accountBalances) {
        this.accountBalances = accountBalances;
    }

    public DepositTransaction userKey(String userKey) {
        this.userKey = userKey;
        return this;
    }

    /**
     * The person that performed the transaction
     *
     * @return userKey
     **/
    @ApiModelProperty(value = "The person that performed the transaction")
    public String getUserKey() {
        return userKey;
    }

    public void setUserKey(String userKey) {
        this.userKey = userKey;
    }

    /**
     * The branch where the transaction was performed
     *
     * @return branchKey
     **/
    @ApiModelProperty(value = "The branch where the transaction was performed")
    public String getBranchKey() {
        return branchKey;
    }

    /**
     * The center where the transaction was performed
     *
     * @return centreKey
     **/
    @ApiModelProperty(value = "The center where the transaction was performed")
    public String getCentreKey() {
        return centreKey;
    }

    public DepositTransaction tillKey(String tillKey) {
        this.tillKey = tillKey;
        return this;
    }

    /**
     * The till key associated with this transaction
     *
     * @return tillKey
     **/
    @ApiModelProperty(value = "The till key associated with this transaction")
    public String getTillKey() {
        return tillKey;
    }

    public void setTillKey(String tillKey) {
        this.tillKey = tillKey;
    }

    public DepositTransaction adjustmentTransactionKey(String adjustmentTransactionKey) {
        this.adjustmentTransactionKey = adjustmentTransactionKey;
        return this;
    }

    /**
     * The key of the deposit transaction where the adjustment for this transaction was made (if any adjustment was involved)
     *
     * @return adjustmentTransactionKey
     **/
    @ApiModelProperty(value = "The key of the deposit transaction where the adjustment for this transaction was made (if any adjustment was involved)")
    public String getAdjustmentTransactionKey() {
        return adjustmentTransactionKey;
    }

    public void setAdjustmentTransactionKey(String adjustmentTransactionKey) {
        this.adjustmentTransactionKey = adjustmentTransactionKey;
    }

    public DepositTransaction originalTransactionKey(String originalTransactionKey) {
        this.originalTransactionKey = originalTransactionKey;
        return this;
    }

    /**
     * The encodedKey of the transaction that was adjusted as part of this one. Available only for adjustment transactions
     *
     * @return originalTransactionKey
     **/
    @ApiModelProperty(value = "The encodedKey of the transaction that was adjusted as part of this one. Available only for adjustment transactions")
    public String getOriginalTransactionKey() {
        return originalTransactionKey;
    }

    public void setOriginalTransactionKey(String originalTransactionKey) {
        this.originalTransactionKey = originalTransactionKey;
    }

    public DepositTransaction migrationEventKey(String migrationEventKey) {
        this.migrationEventKey = migrationEventKey;
        return this;
    }

    /**
     * The migration event encoded key associated with this deposit account. If this account was imported, track which &#39;migration event&#39; they came from
     *
     * @return migrationEventKey
     **/
    @ApiModelProperty(value = "The migration event encoded key associated with this deposit account. If this account was imported, track which 'migration event' they came from")
    public String getMigrationEventKey() {
        return migrationEventKey;
    }

    public void setMigrationEventKey(String migrationEventKey) {
        this.migrationEventKey = migrationEventKey;
    }

    public DepositTransaction terms(DepositTerms terms) {
        this.terms = terms;
        return this;
    }

    /**
     * The terms of the deposit transaction
     *
     * @return terms
     **/
    @ApiModelProperty(value = "The terms of the deposit transaction")
    public DepositTerms getTerms() {
        return terms;
    }

    public void setTerms(DepositTerms terms) {
        this.terms = terms;
    }

    public DepositTransaction transactionDetails(TransactionDetails transactionDetails) {
        this.transactionDetails = transactionDetails;
        return this;
    }

    /**
     * Holds the transaction details
     *
     * @return transactionDetails
     **/
    @ApiModelProperty(value = "Holds the transaction details")
    public TransactionDetails getTransactionDetails() {
        return transactionDetails;
    }

    public void setTransactionDetails(TransactionDetails transactionDetails) {
        this.transactionDetails = transactionDetails;
    }

    public DepositTransaction transferDetails(TransferDetails transferDetails) {
        this.transferDetails = transferDetails;
        return this;
    }

    /**
     * Holds the transfer details
     *
     * @return transferDetails
     **/
    @ApiModelProperty(value = "Holds the transfer details")
    public TransferDetails getTransferDetails() {
        return transferDetails;
    }

    public void setTransferDetails(TransferDetails transferDetails) {
        this.transferDetails = transferDetails;
    }

    /**
     * All the amounts that have been applied or paid within this transaction and involved predefined fees
     *
     * @return fees
     **/
    @ApiModelProperty(value = "All the amounts that have been applied or paid within this transaction and involved predefined fees")
    public List<Fee> getFees() {
        return fees;
    }

    public DepositTransaction cardTransaction(CardTransaction cardTransaction) {
        this.cardTransaction = cardTransaction;
        return this;
    }

    /**
     * The card transaction details that correspond to this deposit transaction (if applicable)
     *
     * @return cardTransaction
     **/
    @ApiModelProperty(value = "The card transaction details that correspond to this deposit transaction (if applicable)")
    public CardTransaction getCardTransaction() {
        return cardTransaction;
    }

    public void setCardTransaction(CardTransaction cardTransaction) {
        this.cardTransaction = cardTransaction;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DepositTransaction depositTransaction = (DepositTransaction) o;
        return Objects.equals(this.encodedKey, depositTransaction.encodedKey) &&
                Objects.equals(this.id, depositTransaction.id) &&
                Objects.equals(this.externalId, depositTransaction.externalId) &&
                Objects.equals(this.paymentOrderId, depositTransaction.paymentOrderId) &&
                Objects.equals(this.creationDate, depositTransaction.creationDate) &&
                Objects.equals(this.valueDate, depositTransaction.valueDate) &&
                Objects.equals(this.bookingDate, depositTransaction.bookingDate) &&
                Objects.equals(this.notes, depositTransaction.notes) &&
                Objects.equals(this.parentAccountKey, depositTransaction.parentAccountKey) &&
                Objects.equals(this.type, depositTransaction.type) &&
                Objects.equals(this.amount, depositTransaction.amount) &&
                Objects.equals(this.currencyCode, depositTransaction.currencyCode) &&
                Objects.equals(this.affectedAmounts, depositTransaction.affectedAmounts) &&
                Objects.equals(this.taxes, depositTransaction.taxes) &&
                Objects.equals(this.accountBalances, depositTransaction.accountBalances) &&
                Objects.equals(this.userKey, depositTransaction.userKey) &&
                Objects.equals(this.branchKey, depositTransaction.branchKey) &&
                Objects.equals(this.centreKey, depositTransaction.centreKey) &&
                Objects.equals(this.tillKey, depositTransaction.tillKey) &&
                Objects.equals(this.adjustmentTransactionKey, depositTransaction.adjustmentTransactionKey) &&
                Objects.equals(this.originalTransactionKey, depositTransaction.originalTransactionKey) &&
                Objects.equals(this.migrationEventKey, depositTransaction.migrationEventKey) &&
                Objects.equals(this.terms, depositTransaction.terms) &&
                Objects.equals(this.transactionDetails, depositTransaction.transactionDetails) &&
                Objects.equals(this.transferDetails, depositTransaction.transferDetails) &&
                Objects.equals(this.fees, depositTransaction.fees) &&
                Objects.equals(this.cardTransaction, depositTransaction.cardTransaction);
    }

    @Override
    public int hashCode() {
        return Objects.hash(encodedKey, id, externalId, paymentOrderId, creationDate, valueDate, bookingDate, notes, parentAccountKey, type, amount, currencyCode, affectedAmounts, taxes, accountBalances, userKey, branchKey, centreKey, tillKey, adjustmentTransactionKey, originalTransactionKey, migrationEventKey, terms, transactionDetails, transferDetails, fees, cardTransaction);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DepositTransaction {\n");

        sb.append("    encodedKey: ").append(toIndentedString(encodedKey)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
        sb.append("    paymentOrderId: ").append(toIndentedString(paymentOrderId)).append("\n");
        sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
        sb.append("    valueDate: ").append(toIndentedString(valueDate)).append("\n");
        sb.append("    bookingDate: ").append(toIndentedString(bookingDate)).append("\n");
        sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
        sb.append("    parentAccountKey: ").append(toIndentedString(parentAccountKey)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
        sb.append("    affectedAmounts: ").append(toIndentedString(affectedAmounts)).append("\n");
        sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
        sb.append("    accountBalances: ").append(toIndentedString(accountBalances)).append("\n");
        sb.append("    userKey: ").append(toIndentedString(userKey)).append("\n");
        sb.append("    branchKey: ").append(toIndentedString(branchKey)).append("\n");
        sb.append("    centreKey: ").append(toIndentedString(centreKey)).append("\n");
        sb.append("    tillKey: ").append(toIndentedString(tillKey)).append("\n");
        sb.append("    adjustmentTransactionKey: ").append(toIndentedString(adjustmentTransactionKey)).append("\n");
        sb.append("    originalTransactionKey: ").append(toIndentedString(originalTransactionKey)).append("\n");
        sb.append("    migrationEventKey: ").append(toIndentedString(migrationEventKey)).append("\n");
        sb.append("    terms: ").append(toIndentedString(terms)).append("\n");
        sb.append("    transactionDetails: ").append(toIndentedString(transactionDetails)).append("\n");
        sb.append("    transferDetails: ").append(toIndentedString(transferDetails)).append("\n");
        sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
        sb.append("    cardTransaction: ").append(toIndentedString(cardTransaction)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * The type of the deposit transaction
     */
    @JsonAdapter(TypeEnum.Adapter.class)
    public enum TypeEnum {
        IMPORT("IMPORT"),

        WRITE_OFF("WRITE_OFF"),

        WRITE_OFF_ADJUSTMENT("WRITE_OFF_ADJUSTMENT"),

        DEPOSIT("DEPOSIT"),

        ADJUSTMENT("ADJUSTMENT"),

        WITHDRAWAL("WITHDRAWAL"),

        WITHDRAWAL_ADJUSTMENT("WITHDRAWAL_ADJUSTMENT"),

        CARD_TRANSACTION_REVERSAL("CARD_TRANSACTION_REVERSAL"),

        TRANSFER("TRANSFER"),

        TRANSFER_ADJUSTMENT("TRANSFER_ADJUSTMENT"),

        FEE_APPLIED("FEE_APPLIED"),

        FEE_ADJUSTED("FEE_ADJUSTED"),

        FEES_DUE_REDUCED("FEES_DUE_REDUCED"),

        INTEREST_APPLIED("INTEREST_APPLIED"),

        INTEREST_APPLIED_ADJUSTMENT("INTEREST_APPLIED_ADJUSTMENT"),

        FEE_REDUCTION_ADJUSTMENT("FEE_REDUCTION_ADJUSTMENT"),

        WITHHOLDING_TAX("WITHHOLDING_TAX"),

        WITHHOLDING_TAX_ADJUSTMENT("WITHHOLDING_TAX_ADJUSTMENT"),

        INTEREST_RATE_CHANGED("INTEREST_RATE_CHANGED"),

        OVERDRAFT_INTEREST_RATE_CHANGED("OVERDRAFT_INTEREST_RATE_CHANGED"),

        OVERDRAFT_LIMIT_CHANGED("OVERDRAFT_LIMIT_CHANGED"),

        BRANCH_CHANGED("BRANCH_CHANGED"),

        LOAN_FUNDED("LOAN_FUNDED"),

        LOAN_FUNDED_ADJUSTMENT("LOAN_FUNDED_ADJUSTMENT"),

        LOAN_REPAID("LOAN_REPAID"),

        LOAN_REPAID_ADJUSTMENT("LOAN_REPAID_ADJUSTMENT"),

        LOAN_FRACTION_BOUGHT("LOAN_FRACTION_BOUGHT"),

        LOAN_FRACTION_BOUGHT_ADJUSTMENT("LOAN_FRACTION_BOUGHT_ADJUSTMENT"),

        LOAN_FRACTION_SOLD("LOAN_FRACTION_SOLD"),

        LOAN_FRACTION_SOLD_ADJUSTMENT("LOAN_FRACTION_SOLD_ADJUSTMENT");

        private String value;

        TypeEnum(String value) {
            this.value = value;
        }

        public static TypeEnum fromValue(String text) {
            for (TypeEnum b : TypeEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<TypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public TypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return TypeEnum.fromValue(String.valueOf(value));
            }
        }
    }

}

