/*
 * deposits/transactions
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.mambu.sdk.model.v2;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * The unit that composes the list used for Deposit transactions client directed searching
 */
@ApiModel(description = "The unit that composes the list used for Deposit transactions client directed searching")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-04-16T09:34:36.124Z")
public class DepositTransactionFilterCriteria {
    @SerializedName("field")
    private FieldEnum field = null;
    @SerializedName("operator")
    private OperatorEnum operator = null;
    @SerializedName("value")
    private String value = null;
    @SerializedName("values")
    private List<String> values = null;
    @SerializedName("secondValue")
    private String secondValue = null;

    public DepositTransactionFilterCriteria field(FieldEnum field) {
        this.field = field;
        return this;
    }

    /**
     * Contains the actual searching fields that can be native (one from the provided list) or otherwise can specify a custom field using the format [customFieldSetId].[customFieldId]. |Field with limited capabilities          |Data Type |Operators   | |-----------------------------------------|----------|------------| |originalTransactionKey                   |KEY       |EQUALS, IN  | |transactionDetails.transactionChannelId  |STRING    |EQUALS      | |originalTransactionID                    |STRING    |EQUALS      |
     *
     * @return field
     **/
    @ApiModelProperty(required = true, value = "Contains the actual searching fields that can be native (one from the provided list) or otherwise can specify a custom field using the format [customFieldSetId].[customFieldId]. |Field with limited capabilities          |Data Type |Operators   | |-----------------------------------------|----------|------------| |originalTransactionKey                   |KEY       |EQUALS, IN  | |transactionDetails.transactionChannelId  |STRING    |EQUALS      | |originalTransactionID                    |STRING    |EQUALS      | ")
    public FieldEnum getField() {
        return field;
    }

    public void setField(FieldEnum field) {
        this.field = field;
    }

    public DepositTransactionFilterCriteria operator(OperatorEnum operator) {
        this.operator = operator;
        return this;
    }

    /**
     * | **Operator**  | **Affected values** | **Available for**                                                    | |---------------|----------------------|----------------------------------------------------------------------| | EQUALS        | ONE_VALUE            | BIG_DECIMAL,BOOLEAN,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY        | | MORE_THAN     | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             | | LESS_THAN     | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             | | BETWEEN       | TWO_VALUES           | BIG_DECIMAL,NUMBER,MONEY,DATE,DATE_TIME                              | | ON            | ONE_VALUE            | DATE,DATE_TIME                                                       | | AFTER         | ONE_VALUE            | DATE,DATE_TIME                                                       | | BEFORE        | ONE_VALUE            | DATE,DATE_TIME                                                       | | STARTS_WITH   | ONE_VALUE            | STRING                                                               | | IN            | LIST                 | ENUM,KEY                                                             | | TODAY         | NO_VALUE             | DATE,DATE_TIME                                                       | | THIS_WEEK     | NO_VALUE             | DATE,DATE_TIME                                                       | | THIS_MONTH    | NO_VALUE             | DATE,DATE_TIME                                                       | | THIS_YEAR     | NO_VALUE             | DATE,DATE_TIME                                                       | | LAST_DAYS     | ONE_VALUE            | NUMBER                                                               | | EMPTY         | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME | | NOT_EMPTY     | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME |
     *
     * @return operator
     **/
    @ApiModelProperty(required = true, value = "| **Operator**  | **Affected values** | **Available for**                                                    | |---------------|----------------------|----------------------------------------------------------------------| | EQUALS        | ONE_VALUE            | BIG_DECIMAL,BOOLEAN,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY        | | MORE_THAN     | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             | | LESS_THAN     | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             | | BETWEEN       | TWO_VALUES           | BIG_DECIMAL,NUMBER,MONEY,DATE,DATE_TIME                              | | ON            | ONE_VALUE            | DATE,DATE_TIME                                                       | | AFTER         | ONE_VALUE            | DATE,DATE_TIME                                                       | | BEFORE        | ONE_VALUE            | DATE,DATE_TIME                                                       | | STARTS_WITH   | ONE_VALUE            | STRING                                                               | | IN            | LIST                 | ENUM,KEY                                                             | | TODAY         | NO_VALUE             | DATE,DATE_TIME                                                       | | THIS_WEEK     | NO_VALUE             | DATE,DATE_TIME                                                       | | THIS_MONTH    | NO_VALUE             | DATE,DATE_TIME                                                       | | THIS_YEAR     | NO_VALUE             | DATE,DATE_TIME                                                       | | LAST_DAYS     | ONE_VALUE            | NUMBER                                                               | | EMPTY         | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME | | NOT_EMPTY     | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME |")
    public OperatorEnum getOperator() {
        return operator;
    }

    public void setOperator(OperatorEnum operator) {
        this.operator = operator;
    }

    public DepositTransactionFilterCriteria value(String value) {
        this.value = value;
        return this;
    }

    /**
     * The value to match the searching criteria
     *
     * @return value
     **/
    @ApiModelProperty(value = "The value to match the searching criteria")
    public String getValue() {
        return value;
    }

    public void setValue(String value) {
        this.value = value;
    }

    public DepositTransactionFilterCriteria values(List<String> values) {
        this.values = values;
        return this;
    }

    public DepositTransactionFilterCriteria addValuesItem(String valuesItem) {
        if (this.values == null) {
            this.values = new ArrayList<String>();
        }
        this.values.add(valuesItem);
        return this;
    }

    /**
     * List of values when operator is IN.
     *
     * @return values
     **/
    @ApiModelProperty(value = "List of values when operator is IN.")
    public List<String> getValues() {
        return values;
    }

    public void setValues(List<String> values) {
        this.values = values;
    }

    public DepositTransactionFilterCriteria secondValue(String secondValue) {
        this.secondValue = secondValue;
        return this;
    }

    /**
     * The second value to match the searching criteria, when using BETWEEN, together with value
     *
     * @return secondValue
     **/
    @ApiModelProperty(value = "The second value to match the searching criteria, when using BETWEEN, together with value")
    public String getSecondValue() {
        return secondValue;
    }

    public void setSecondValue(String secondValue) {
        this.secondValue = secondValue;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DepositTransactionFilterCriteria depositTransactionFilterCriteria = (DepositTransactionFilterCriteria) o;
        return Objects.equals(this.field, depositTransactionFilterCriteria.field) &&
                Objects.equals(this.operator, depositTransactionFilterCriteria.operator) &&
                Objects.equals(this.value, depositTransactionFilterCriteria.value) &&
                Objects.equals(this.values, depositTransactionFilterCriteria.values) &&
                Objects.equals(this.secondValue, depositTransactionFilterCriteria.secondValue);
    }

    @Override
    public int hashCode() {
        return Objects.hash(field, operator, value, values, secondValue);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DepositTransactionFilterCriteria {\n");

        sb.append("    field: ").append(toIndentedString(field)).append("\n");
        sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
        sb.append("    value: ").append(toIndentedString(value)).append("\n");
        sb.append("    values: ").append(toIndentedString(values)).append("\n");
        sb.append("    secondValue: ").append(toIndentedString(secondValue)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    /**
     * Contains the actual searching fields that can be native (one from the provided list) or otherwise can specify a custom field using the format [customFieldSetId].[customFieldId]. |Field with limited capabilities          |Data Type |Operators   | |-----------------------------------------|----------|------------| |originalTransactionKey                   |KEY       |EQUALS, IN  | |transactionDetails.transactionChannelId  |STRING    |EQUALS      | |originalTransactionID                    |STRING    |EQUALS      |
     */
    @JsonAdapter(FieldEnum.Adapter.class)
    public enum FieldEnum {
        ENCODEDKEY("encodedKey"),

        ID("id"),

        EXTERNALID("externalId"),

        PRODUCTID("productID"),

        CURRENCYCODE("currencyCode"),

        BRANCHID("branchID"),

        BRANCHKEY("branchKey"),

        CENTREID("centreID"),

        CENTREKEY("centreKey"),

        TILLID("tillID"),

        TILLKEY("tillKey"),

        AMOUNT("amount"),

        AFFECTEDAMOUNTS_FUNDSAMOUNT("affectedAmounts.fundsAmount"),

        AFFECTEDAMOUNTS_INTERESTAMOUNT("affectedAmounts.interestAmount"),

        AFFECTEDAMOUNTS_FEESAMOUNT("affectedAmounts.feesAmount"),

        PARENTACCOUNTKEY("parentAccountKey"),

        PARENTACCOUNTID("parentAccountID"),

        PRODUCTTYPEKEY("productTypeKey"),

        USERKEY("userKey"),

        ADJUSTMENTTRANSACTIONID("adjustmentTransactionID"),

        ADJUSTMENTTRANSACTIONKEY("adjustmentTransactionKey"),

        ORIGINALTRANSACTIONKEY("originalTransactionKey"),

        ORIGINALTRANSACTIONID("originalTransactionID"),

        TRANSACTIONDETAILS_TRANSACTIONCHANNELKEY("transactionDetails.transactionChannelKey"),

        TRANSACTIONDETAILS_TRANSACTIONCHANNELID("transactionDetails.transactionChannelId"),

        TYPE("type"),

        CREATIONDATE("creationDate"),

        ACCOUNTBALANCES_TOTALBALANCE("accountBalances.totalBalance"),

        VALUEDATE("valueDate"),

        TAXES_TAXRATE("taxes.taxRate"),

        TERMS_INTERESTSETTINGS_INTERESTRATE("terms.interestSettings.interestRate"),

        FEES_TRIGGER("fees.trigger"),

        FEES_NAME("fees.name"),

        FEES_PREDEFINEDFEEKEY("fees.predefinedFeeKey"),

        WASADJUSTED("wasAdjusted"),

        TYPEISADJUSTMENT("typeIsAdjustment"),

        AFFECTEDAMOUNTS_OVERDRAFTAMOUNT("affectedAmounts.overdraftAmount"),

        AFFECTEDAMOUNTS_OVERDRAFTINTERESTAMOUNT("affectedAmounts.overdraftInterestAmount"),

        AFFECTEDAMOUNTS_OVERDRAFTFEESAMOUNT("affectedAmounts.overdraftFeesAmount"),

        AFFECTEDAMOUNTS_TECHNICALOVERDRAFTAMOUNT("affectedAmounts.technicalOverdraftAmount"),

        AFFECTEDAMOUNTS_TECHNICALOVERDRAFTINTERESTAMOUNT("affectedAmounts.technicalOverdraftInterestAmount"),

        TERMS_OVERDRAFTINTERESTSETTINGS_INTERESTRATE("terms.overdraftInterestSettings.interestRate"),

        TERMS_OVERDRAFTINTERESTSETTINGS_INDEXINTERESTRATE("terms.overdraftInterestSettings.indexInterestRate");

        private String value;

        FieldEnum(String value) {
            this.value = value;
        }

        public static FieldEnum fromValue(String text) {
            for (FieldEnum b : FieldEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<FieldEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final FieldEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public FieldEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return FieldEnum.fromValue(String.valueOf(value));
            }
        }
    }

    /**
     * | **Operator**  | **Affected values** | **Available for**                                                    | |---------------|----------------------|----------------------------------------------------------------------| | EQUALS        | ONE_VALUE            | BIG_DECIMAL,BOOLEAN,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY        | | MORE_THAN     | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             | | LESS_THAN     | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             | | BETWEEN       | TWO_VALUES           | BIG_DECIMAL,NUMBER,MONEY,DATE,DATE_TIME                              | | ON            | ONE_VALUE            | DATE,DATE_TIME                                                       | | AFTER         | ONE_VALUE            | DATE,DATE_TIME                                                       | | BEFORE        | ONE_VALUE            | DATE,DATE_TIME                                                       | | STARTS_WITH   | ONE_VALUE            | STRING                                                               | | IN            | LIST                 | ENUM,KEY                                                             | | TODAY         | NO_VALUE             | DATE,DATE_TIME                                                       | | THIS_WEEK     | NO_VALUE             | DATE,DATE_TIME                                                       | | THIS_MONTH    | NO_VALUE             | DATE,DATE_TIME                                                       | | THIS_YEAR     | NO_VALUE             | DATE,DATE_TIME                                                       | | LAST_DAYS     | ONE_VALUE            | NUMBER                                                               | | EMPTY         | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME | | NOT_EMPTY     | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME |
     */
    @JsonAdapter(OperatorEnum.Adapter.class)
    public enum OperatorEnum {
        EQUALS("EQUALS"),

        EQUALS_CASE_SENSITIVE("EQUALS_CASE_SENSITIVE"),

        DIFFERENT_THAN("DIFFERENT_THAN"),

        MORE_THAN("MORE_THAN"),

        LESS_THAN("LESS_THAN"),

        BETWEEN("BETWEEN"),

        ON("ON"),

        AFTER("AFTER"),

        BEFORE("BEFORE"),

        STARTS_WITH("STARTS_WITH"),

        IN("IN"),

        TODAY("TODAY"),

        THIS_WEEK("THIS_WEEK"),

        THIS_MONTH("THIS_MONTH"),

        THIS_YEAR("THIS_YEAR"),

        LAST_DAYS("LAST_DAYS"),

        EMPTY("EMPTY"),

        NOT_EMPTY("NOT_EMPTY");

        private String value;

        OperatorEnum(String value) {
            this.value = value;
        }

        public static OperatorEnum fromValue(String text) {
            for (OperatorEnum b : OperatorEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<OperatorEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final OperatorEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public OperatorEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return OperatorEnum.fromValue(String.valueOf(value));
            }
        }
    }

}

